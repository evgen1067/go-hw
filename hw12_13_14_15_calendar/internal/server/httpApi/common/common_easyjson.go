// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package common

import (
	json "encoding/json"
	repository "github.com/evgen1067/hw12_13_14_15_calendar/internal/repository"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(in *jlexer.Lexer, out *ResponseEventList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]repository.Event, 0, 0)
					} else {
						out.Events = []repository.Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 repository.Event
					easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalRepository(in, &v1)
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(out *jwriter.Writer, in ResponseEventList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalRepository(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseEventList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseEventList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseEventList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseEventList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon(l, v)
}
func easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalRepository(in *jlexer.Lexer, out *repository.Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = repository.EventID(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateStart":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateStart).UnmarshalJSON(data))
			}
		case "dateEnd":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEnd).UnmarshalJSON(data))
			}
		case "notifyIn":
			out.NotifyIn = int64(in.Int64())
		case "ownerId":
			out.OwnerID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalRepository(out *jwriter.Writer, in repository.Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateStart\":"
		out.RawString(prefix)
		out.Raw((in.DateStart).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEnd\":"
		out.RawString(prefix)
		out.Raw((in.DateEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"notifyIn\":"
		out.RawString(prefix)
		out.Int64(int64(in.NotifyIn))
	}
	{
		const prefix string = ",\"ownerId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OwnerID))
	}
	out.RawByte('}')
}
func easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(in *jlexer.Lexer, out *ResponseEventID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "eventId":
			out.EventID = repository.EventID(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(out *jwriter.Writer, in ResponseEventID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"eventId\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseEventID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseEventID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseEventID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseEventID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon1(l, v)
}
func easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(in *jlexer.Lexer, out *Exception) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(out *jwriter.Writer, in Exception) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exception) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exception) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exception) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exception) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComEvgen1067Hw12131415CalendarInternalServerHttpCommon2(l, v)
}
